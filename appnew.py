# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HxMmvY98ZNKrQKdz9rAVPYzRus8J4UHM
"""

import streamlit as st
import pickle
import pandas as pd

# --------------------------
# Load the trained model
# --------------------------
with open("marketing_model.pkl", "rb") as f:
    model = pickle.load(f)

st.title("ðŸ“Š Marketing Campaign Prediction App")
st.write("Enter the client details below:")

# --------------------------
# User Inputs
# --------------------------
age = st.number_input("Age", min_value=18, max_value=100, value=30)
balance = st.number_input("Balance", min_value=-10000, max_value=100000, value=1000)
campaign = st.number_input("Number of contacts during campaign", min_value=0, max_value=50, value=1)
previous = st.number_input("Number of contacts before this campaign", min_value=0, max_value=50, value=0)

job = st.selectbox("Job", [
    "admin.", "blue-collar", "entrepreneur", "housemaid", "management",
    "retired", "self-employed", "services", "student", "technician", "unemployed"
])

marital = st.selectbox("Marital Status", ["divorced", "married", "single"])

education = st.selectbox("Education", ["primary", "secondary", "tertiary"])

default_choice = st.selectbox("Credit in Default?", ["no", "yes"])
housing_choice = st.selectbox("Housing Loan?", ["no", "yes"])
loan_choice = st.selectbox("Personal Loan?", ["no", "yes"])

month = st.selectbox("Last Contact Month", [
    "jan", "feb", "mar", "apr", "may", "jun",
    "jul", "aug", "sep", "oct", "nov", "dec"
])

past_campaign = st.selectbox("Previously Contacted?", ["no", "yes"])

# --------------------------
# Exact Training Columns (from your X.info())
# --------------------------
training_columns = [
    "age", "balance", "campaign", "previous",
    "job_admin.", "job_blue-collar", "job_entrepreneur", "job_housemaid",
    "job_management", "job_retired", "job_self-employed", "job_services",
    "job_student", "job_technician", "job_unemployed",
    "marital_divorced", "marital_married", "marital_single",
    "education_primary", "education_secondary", "education_tertiary",
    "default_no", "default_yes",
    "housing_no", "housing_yes",
    "loan_no", "loan_yes",
    "month_apr", "month_aug", "month_dec",
    "month_feb", "month_jan", "month_jul", "month_jun", "month_mar",
    "month_may", "month_nov", "month_oct", "month_sep",
    "pastcampaign_no", "pastcampaign_yes"
]

# --------------------------
# Build Input Dict
# --------------------------
input_data = dict.fromkeys(training_columns, 0)

# Numeric values
input_data["age"] = age
input_data["balance"] = balance
input_data["campaign"] = campaign
input_data["previous"] = previous

# One-hot encoded categorical values
input_data[f"job_{job}"] = 1
input_data[f"marital_{marital}"] = 1
input_data[f"education_{education}"] = 1
input_data[f"default_{default_choice}"] = 1
input_data[f"housing_{housing_choice}"] = 1
input_data[f"loan_{loan_choice}"] = 1
input_data[f"month_{month}"] = 1
input_data[f"pastcampaign_{past_campaign}"] = 1

# DataFrame with exact column order
X_new = pd.DataFrame([input_data], columns=training_columns)

# --------------------------
# Prediction
# --------------------------
if st.button("Predict"):
    pred = model.predict(X_new)[0]
    prob = model.predict_proba(X_new)[0][1] if hasattr(model, "predict_proba") else None

    st.subheader("ðŸ”® Prediction Result")
    st.write(f"Predicted Class: **{pred}**")
    if prob is not None:
        st.write(f"Probability of positive outcome: **{prob:.2f}**")

    # Debug: show the input row
    with st.expander("See model input DataFrame"):
        st.write(X_new)