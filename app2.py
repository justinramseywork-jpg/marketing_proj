# -*- coding: utf-8 -*-
"""app2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1euyUBkqtyLCHlTpVa6gZ-oUCc7-CXHuZ
"""

import streamlit as st
import pickle
import numpy as np
import pandas as pd
# Load model
with open("marketing_model.pkl", "rb") as f:
    model = pickle.load(f)
st.title("ðŸ“Š Marketing Campaign Prediction App")
st.write("Fill out the details below to predict the campaign response:")
# --- Numeric inputs ---
age = st.number_input("Age", min_value=18, max_value=100, value=30)
balance = st.number_input("Balance", min_value=-5000, max_value=100000, value=1000)
campaign = st.number_input("Number of contacts during campaign", min_value=0, max_value=50, value=1)
previous = st.number_input("Number of contacts performed before this campaign", min_value=0, max_value=50, value=0)
# --- Job dropdown ---
job_options = [
    "admin.", "blue-collar", "entrepreneur", "housemaid", "management",
    "retired", "self-employed", "services", "student", "technician", "unemployed"
]
job = st.selectbox("Job", job_options)
# --- Marital dropdown ---
marital_options = ["divorced", "married", "single"]
marital = st.selectbox("Marital Status", marital_options)
# --- Education dropdown ---
education_options = ["primary", "secondary"]
education = st.selectbox("Education", education_options)
# --- Month dropdown ---
month_options = ["jan", "feb", "mar", "may", "jun", "jul", "sep", "oct", "nov"]
month = st.selectbox("Last Contact Month", month_options)
# --- Past campaign dropdown ---
past_campaign_options = ["yes", "no"]
past_campaign = st.selectbox("Previously Contacted?", past_campaign_options)
# --------------------------
# Build input row
# --------------------------
# Initialize all columns with 0/False
columns = [
    "age", "balance", "campaign", "previous",
    "job_admin.", "job_blue-collar", "job_entrepreneur", "job_housemaid",
    "job_management", "job_retired", "job_self-employed", "job_services",
    "job_student", "job_technician", "job_unemployed",
    "marital_divorced", "marital_married", "marital_single",
    "education_primary", "education_secondary",
    "month_feb", "month_jan", "month_jul", "month_jun", "month_mar",
    "month_may", "month_nov", "month_oct", "month_sep",
    "pastcampaign_no", "pastcampaign_yes"
]
input_data = dict.fromkeys(columns, 0)
# Fill numeric values
input_data["age"] = age
input_data["balance"] = balance
input_data["campaign"] = campaign
input_data["previous"] = previous
# One-hot encode selections
input_data[f"job_{job}"] = 1
input_data[f"marital_{marital}"] = 1
input_data[f"education_{education}"] = 1
input_data[f"month_{month}"] = 1
input_data[f"pastcampaign_{past_campaign}"] = 1
# Convert to DataFrame
X_new = pd.DataFrame([input_data])

# --------------------------
# Predict
# --------------------------
if st.button("Predict"):
    pred = model.predict(X_new)[0]
    prob = model.predict_proba(X_new)[0][1] if hasattr(model, "predict_proba") else None
    st.subheader("Prediction Result")
    st.write(f"Predicted Class: **{pred}**")
    if prob is not None:
        st.write(f"Probability of positive outcome: **{prob:.2f}**")